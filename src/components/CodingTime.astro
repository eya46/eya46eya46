---
import type { AllTimeSinceToday, Last7Data, ProgramLanguage } from "../utils/wakatimeType";
import { getCacheUpdateTime } from "../utils/cache";
import H2Title from "./H2Title.astro";

interface Props {
  data?: AllTimeSinceToday;
  last7Days?: Last7Data;
  colorData?: ProgramLanguage;
}

const { data, last7Days, colorData } = Astro.props;

const last7Time = getCacheUpdateTime("last_7_days");
const allDataTime = getCacheUpdateTime("all_time_since_today");
---

<H2Title timestamp={last7Time && allDataTime ? Math.min(last7Time, allDataTime) : undefined} title="编码时间" />
<div class="space-y-0.5">
  {
    !data ? null : (
      <div class="flex text-base">
        <span class="w-28 select-none">总编码时间:</span>
        <span class="underline">{data.text}</span>
      </div>
    )
  }
  {
    !last7Days ? null : (
      <div class="flex text-base">
        <span class="w-28 select-none">七日编码时间:</span>
        <span class="underline underline-offset-2">{last7Days.categories[0]?.text ?? "无"}</span>
      </div>
    )
  }
  {
    !last7Days || last7Days.languages.length === 0 || !colorData ? null : (
      <div class="rounded-xl bg-gray-300/50 p-3">
        {last7Days.languages.slice(0, 10).map((item) =>
          item.total_seconds > 60 * 30 ? (
            <div class="flex space-y-0.5 text-base">
              <span
                class="w-28 stroke-red-900 text-gray-500 select-none"
                style={colorData[item.name] ? `color: ${colorData[item.name]}` : null}
              >
                <span class="rounded duration-150 hover:bg-gray-400 hover:p-1">{item.name}:</span>
              </span>
              <span class="underline">{item.text}</span>
            </div>
          ) : null
        )}
      </div>
    )
  }
</div>
